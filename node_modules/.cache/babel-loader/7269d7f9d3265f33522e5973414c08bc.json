{"ast":null,"code":"var _jsxFileName = \"/Users/sushmitamaity/Calmify/Mental-Health-Support-App/src/containers/profile/UpdatePassword.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./AccountSettingsSections.css\";\nimport { updatePasswordAndEmail, resetPassword } from \"../../actions/authActions\";\nimport { Form, Container, Button, Col, Modal } from \"react-bootstrap\";\n\nconst UpdatePassword = props => {\n  const {\n    auth,\n    authError,\n    errMessage,\n    errKey\n  } = props;\n  const operations = {\n    passwordUpdate: {\n      label: \"Updating your password\",\n      successMessage: \"Your password has been updated successfully\",\n      updateKey: \"updatePassword\"\n    },\n    passwordReset: {\n      label: \"Recovering your password\",\n      successMessage: \"A reset password email has been sent successfully, you can check your mailbox to set a new password\",\n      updateKey: \"resetPassword\"\n    }\n  };\n  const [newPassword, setNewPassword] = React.useState(\"\");\n  const [passwordRepeat, setPasswordRepeat] = React.useState(\"\");\n  const [confirmModalShow, setConfirmModalShow] = React.useState(false);\n  const [updateSuccessModalShow, setUpdateSuccessModalShow] = React.useState(false);\n  const [resetSuccessModalShow, setResetSuccessModalShow] = React.useState(false);\n  const [doesPasswordMatch, setDoesPasswordMatch] = React.useState(true);\n  const [doesPasswordValid, setDoesPasswordValid] = React.useState(true);\n\n  const checkPassword = () => {\n    if (newPassword === passwordRepeat && newPassword.length > 5) {\n      setDoesPasswordMatch(true);\n      setDoesPasswordValid(true);\n      return true;\n    } else {\n      if (newPassword !== passwordRepeat) {\n        setDoesPasswordMatch(false);\n      }\n\n      if (newPassword.length < 6) {\n        setDoesPasswordValid(false);\n      }\n    }\n\n    return false;\n  };\n\n  const updatePassword = password => {\n    const data = {\n      currentEmail: auth.email,\n      currentPassword: password,\n      newPassword,\n      userId: auth.uid,\n      key: \"updatePassword\"\n    };\n    props.updatePasswordAndEmail(data);\n  };\n\n  const ConfirmModal = props => {\n    const [currentPassword, setCurrentPassword] = React.useState(\"\");\n    return /*#__PURE__*/React.createElement(Modal, Object.assign({}, props, {\n      size: \"md\",\n      \"aria-labelledby\": \"contained-modal-title-vcenter updatePassword\",\n      centered: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"contained-modal-title-vcenter updatePassword\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    }, \"Updating your password\")), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }, \"Enter your current password to confirm\"), /*#__PURE__*/React.createElement(Form.Control, {\n      type: \"password\",\n      placeholder: \"Password\",\n      onInput: e => {\n        setCurrentPassword(e.target.value);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"danger\",\n      onClick: props.onHide,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"primary\",\n      onClick: () => {\n        props.onHide();\n        updatePassword(currentPassword);\n        setUpdateSuccessModalShow(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }, \"Update Password\")));\n  };\n\n  const SuccessModal = props => {\n    return /*#__PURE__*/React.createElement(Modal, Object.assign({}, props, {\n      size: \"md\",\n      \"aria-labelledby\": `contained-modal-title-vcenter ${props.operation.label}`,\n      centered: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: `contained-modal-title-vcenter ${props.operation.label}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }\n    }, props.operation.label)), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }, authError && errKey === props.operation.updateKey ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"errMsgContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 15\n      }\n    }, authError), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"errMsg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 15\n      }\n    }, errMessage)) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, props.operation.successMessage)), /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"success\",\n      onClick: props.onHide,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }\n    }, \"Done\")));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"updatePassword\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: \"editingTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, \"Change Password\"), /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    as: Col,\n    controlId: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, \"New Password\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"password\",\n    placeholder: \"Password\",\n    onInput: e => {\n      setNewPassword(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    as: Col,\n    controlId: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, \"Confirm New Password\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"password\",\n    placeholder: \"Re-type password\",\n    onInput: e => {\n      setPasswordRepeat(e.target.value);\n      setDoesPasswordMatch(true);\n      setDoesPasswordValid(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, !doesPasswordMatch && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"passwordMatch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }, \"Your passwords must match\")), /*#__PURE__*/React.createElement(Form.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }, !doesPasswordValid && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"passwordValid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, \"Your password must be at least 6 characters\")), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  }, authError && errKey === \"updatePassword\" && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"errMsgContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 15\n    }\n  }, authError), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"errMsg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 15\n    }\n  }, errMessage)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"resetPassword\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }, \"Forgot your password?\", \" \", /*#__PURE__*/React.createElement(\"b\", {\n    onClick: () => {\n      props.resetPassword(auth.email);\n\n      if (errKey !== \"updatePassword\") {\n        setResetSuccessModalShow(true);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 11\n    }\n  }, \"Click here\"), \" \", \"to send you a reset password email\")), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    onClick: () => {\n      if (checkPassword()) {\n        setConfirmModalShow(true);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }\n  }, \"Update Password\"), /*#__PURE__*/React.createElement(ConfirmModal, {\n    show: confirmModalShow,\n    onHide: () => setConfirmModalShow(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SuccessModal, {\n    show: updateSuccessModalShow,\n    onHide: () => setUpdateSuccessModalShow(false),\n    operation: operations.passwordUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SuccessModal, {\n    show: resetSuccessModalShow,\n    onHide: () => setResetSuccessModalShow(false),\n    operation: operations.passwordReset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    authError: state.auth.authError,\n    errMessage: state.auth.errMessage,\n    errKey: state.auth.errKey,\n    auth: state.firebase.auth\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updatePasswordAndEmail: data => dispatch(updatePasswordAndEmail(data)),\n    resetPassword: email => dispatch(resetPassword(email))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdatePassword);","map":{"version":3,"sources":["/Users/sushmitamaity/Calmify/Mental-Health-Support-App/src/containers/profile/UpdatePassword.jsx"],"names":["React","connect","updatePasswordAndEmail","resetPassword","Form","Container","Button","Col","Modal","UpdatePassword","props","auth","authError","errMessage","errKey","operations","passwordUpdate","label","successMessage","updateKey","passwordReset","newPassword","setNewPassword","useState","passwordRepeat","setPasswordRepeat","confirmModalShow","setConfirmModalShow","updateSuccessModalShow","setUpdateSuccessModalShow","resetSuccessModalShow","setResetSuccessModalShow","doesPasswordMatch","setDoesPasswordMatch","doesPasswordValid","setDoesPasswordValid","checkPassword","length","updatePassword","password","data","currentEmail","email","currentPassword","userId","uid","key","ConfirmModal","setCurrentPassword","e","target","value","onHide","SuccessModal","operation","mapStateToProps","state","firebase","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,+BAAP;AACA,SACEC,sBADF,EAEEC,aAFF,QAGO,2BAHP;AAIA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,GAAlC,EAAuCC,KAAvC,QAAoD,iBAApD;;AAEA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAChC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,SAAR;AAAmBC,IAAAA,UAAnB;AAA+BC,IAAAA;AAA/B,MAA0CJ,KAAhD;AACA,QAAMK,UAAU,GAAG;AACjBC,IAAAA,cAAc,EAAE;AACdC,MAAAA,KAAK,EAAE,wBADO;AAEdC,MAAAA,cAAc,EAAE,6CAFF;AAGdC,MAAAA,SAAS,EAAE;AAHG,KADC;AAMjBC,IAAAA,aAAa,EAAE;AACbH,MAAAA,KAAK,EAAE,0BADM;AAEbC,MAAAA,cAAc,EACZ,qGAHW;AAIbC,MAAAA,SAAS,EAAE;AAJE;AANE,GAAnB;AAcA,QAAM,CAACE,WAAD,EAAcC,cAAd,IAAgCtB,KAAK,CAACuB,QAAN,CAAe,EAAf,CAAtC;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCzB,KAAK,CAACuB,QAAN,CAAe,EAAf,CAA5C;AACA,QAAM,CAACG,gBAAD,EAAmBC,mBAAnB,IAA0C3B,KAAK,CAACuB,QAAN,CAAe,KAAf,CAAhD;AACA,QAAM,CAACK,sBAAD,EAAyBC,yBAAzB,IAAsD7B,KAAK,CAACuB,QAAN,CAC1D,KAD0D,CAA5D;AAGA,QAAM,CAACO,qBAAD,EAAwBC,wBAAxB,IAAoD/B,KAAK,CAACuB,QAAN,CACxD,KADwD,CAA1D;AAGA,QAAM,CAACS,iBAAD,EAAoBC,oBAApB,IAA4CjC,KAAK,CAACuB,QAAN,CAAe,IAAf,CAAlD;AACA,QAAM,CAACW,iBAAD,EAAoBC,oBAApB,IAA4CnC,KAAK,CAACuB,QAAN,CAAe,IAAf,CAAlD;;AAEA,QAAMa,aAAa,GAAG,MAAM;AAC1B,QAAIf,WAAW,KAAKG,cAAhB,IAAkCH,WAAW,CAACgB,MAAZ,GAAqB,CAA3D,EAA8D;AAC5DJ,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACAE,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACA,aAAO,IAAP;AACD,KAJD,MAIO;AACL,UAAId,WAAW,KAAKG,cAApB,EAAoC;AAClCS,QAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD;;AACD,UAAIZ,WAAW,CAACgB,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BF,QAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD;AACF;;AACD,WAAO,KAAP;AACD,GAdD;;AAgBA,QAAMG,cAAc,GAAIC,QAAD,IAAc;AACnC,UAAMC,IAAI,GAAG;AACXC,MAAAA,YAAY,EAAE9B,IAAI,CAAC+B,KADR;AAEXC,MAAAA,eAAe,EAAEJ,QAFN;AAGXlB,MAAAA,WAHW;AAIXuB,MAAAA,MAAM,EAAEjC,IAAI,CAACkC,GAJF;AAKXC,MAAAA,GAAG,EAAE;AALM,KAAb;AAOApC,IAAAA,KAAK,CAACR,sBAAN,CAA6BsC,IAA7B;AACD,GATD;;AAWA,QAAMO,YAAY,GAAIrC,KAAD,IAAW;AAC9B,UAAM,CAACiC,eAAD,EAAkBK,kBAAlB,IAAwChD,KAAK,CAACuB,QAAN,CAAe,EAAf,CAA9C;AACA,wBACE,oBAAC,KAAD,oBACMb,KADN;AAEE,MAAA,IAAI,EAAC,IAFP;AAGE,yBAAgB,8CAHlB;AAIE,MAAA,QAAQ,MAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAME,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,WAAW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD,CAAO,KAAP;AAAa,MAAA,EAAE,EAAC,8CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,CANF,eAWE,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDADF,eAEE,oBAAC,IAAD,CAAM,OAAN;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,WAAW,EAAC,UAFd;AAGE,MAAA,OAAO,EAAGuC,CAAD,IAAO;AACdD,QAAAA,kBAAkB,CAACC,CAAC,CAACC,MAAF,CAASC,KAAV,CAAlB;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAXF,eAqBE,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,QAAhB;AAAyB,MAAA,OAAO,EAAEzC,KAAK,CAAC0C,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,oBAAC,MAAD;AACE,MAAA,OAAO,EAAC,SADV;AAEE,MAAA,OAAO,EAAE,MAAM;AACb1C,QAAAA,KAAK,CAAC0C,MAAN;AACAd,QAAAA,cAAc,CAACK,eAAD,CAAd;AACAd,QAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACD,OANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAJF,CArBF,CADF;AAuCD,GAzCD;;AA2CA,QAAMwB,YAAY,GAAI3C,KAAD,IAAW;AAC9B,wBACE,oBAAC,KAAD,oBACMA,KADN;AAEE,MAAA,IAAI,EAAC,IAFP;AAGE,yBAAkB,iCAAgCA,KAAK,CAAC4C,SAAN,CAAgBrC,KAAM,EAH1E;AAIE,MAAA,QAAQ,MAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAME,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,WAAW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD,CAAO,KAAP;AACE,MAAA,EAAE,EAAG,iCAAgCP,KAAK,CAAC4C,SAAN,CAAgBrC,KAAM,EAD7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGGP,KAAK,CAAC4C,SAAN,CAAgBrC,KAHnB,CADF,CANF,eAaE,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGL,SAAS,IAAIE,MAAM,KAAKJ,KAAK,CAAC4C,SAAN,CAAgBnC,SAAxC,gBACC;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIP,SAAJ,CADF,eAEE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyBC,UAAzB,CAFF,CADD,gBAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIH,KAAK,CAAC4C,SAAN,CAAgBpC,cAApB,CAPJ,CAbF,eAuBE,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,OAAO,EAAER,KAAK,CAAC0C,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CAvBF,CADF;AA+BD,GAhCD;;AAkCA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,eAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,EAAE,EAAE7C,GAAhB;AAAqB,IAAA,SAAS,EAAC,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,oBAAC,IAAD,CAAM,OAAN;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,WAAW,EAAC,UAFd;AAGE,IAAA,OAAO,EAAG0C,CAAD,IAAO;AACd3B,MAAAA,cAAc,CAAC2B,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACD,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,eAWE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,EAAE,EAAE5C,GAAhB;AAAqB,IAAA,SAAS,EAAC,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,eAEE,oBAAC,IAAD,CAAM,OAAN;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,WAAW,EAAC,kBAFd;AAGE,IAAA,OAAO,EAAG0C,CAAD,IAAO;AACdxB,MAAAA,iBAAiB,CAACwB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAjB;AACAlB,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACAE,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAXF,CADF,eAyBE,oBAAC,IAAD,CAAM,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACH,iBAAD,iBACC;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAFJ,CAzBF,eA8BE,oBAAC,IAAD,CAAM,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACE,iBAAD,iBACC;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAFJ,CA9BF,eAqCE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGtB,SAAS,IAAIE,MAAM,KAAK,gBAAxB,iBACC;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIF,SAAJ,CADF,eAEE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyBC,UAAzB,CAFF,CAHJ,CArCF,CAFF,eAiDE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BACwB,GADxB,eAEE;AACE,IAAA,OAAO,EAAE,MAAM;AACbH,MAAAA,KAAK,CAACP,aAAN,CAAoBQ,IAAI,CAAC+B,KAAzB;;AACA,UAAI5B,MAAM,KAAK,gBAAf,EAAiC;AAC/BiB,QAAAA,wBAAwB,CAAC,IAAD,CAAxB;AACD;AACF,KANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,EAWO,GAXP,uCADF,CAjDF,eAkEE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAC,SADV;AAEE,IAAA,OAAO,EAAE,MAAM;AACb,UAAIK,aAAa,EAAjB,EAAqB;AACnBT,QAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD;AACF,KANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAlEF,eA6EE,oBAAC,YAAD;AACE,IAAA,IAAI,EAAED,gBADR;AAEE,IAAA,MAAM,EAAE,MAAMC,mBAAmB,CAAC,KAAD,CAFnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7EF,eAkFE,oBAAC,YAAD;AACE,IAAA,IAAI,EAAEC,sBADR;AAEE,IAAA,MAAM,EAAE,MAAMC,yBAAyB,CAAC,KAAD,CAFzC;AAGE,IAAA,SAAS,EAAEd,UAAU,CAACC,cAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlFF,eAwFE,oBAAC,YAAD;AACE,IAAA,IAAI,EAAEc,qBADR;AAEE,IAAA,MAAM,EAAE,MAAMC,wBAAwB,CAAC,KAAD,CAFxC;AAGE,IAAA,SAAS,EAAEhB,UAAU,CAACK,aAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxFF,CADF;AAgGD,CApOD;;AAsOA,MAAMmC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACL5C,IAAAA,SAAS,EAAE4C,KAAK,CAAC7C,IAAN,CAAWC,SADjB;AAELC,IAAAA,UAAU,EAAE2C,KAAK,CAAC7C,IAAN,CAAWE,UAFlB;AAGLC,IAAAA,MAAM,EAAE0C,KAAK,CAAC7C,IAAN,CAAWG,MAHd;AAILH,IAAAA,IAAI,EAAE6C,KAAK,CAACC,QAAN,CAAe9C;AAJhB,GAAP;AAMD,CAPD;;AASA,MAAM+C,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLzD,IAAAA,sBAAsB,EAAGsC,IAAD,IAAUmB,QAAQ,CAACzD,sBAAsB,CAACsC,IAAD,CAAvB,CADrC;AAELrC,IAAAA,aAAa,EAAGuC,KAAD,IAAWiB,QAAQ,CAACxD,aAAa,CAACuC,KAAD,CAAd;AAF7B,GAAP;AAID,CALD;;AAOA,eAAezC,OAAO,CAACsD,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CjD,cAA7C,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./AccountSettingsSections.css\";\nimport {\n  updatePasswordAndEmail,\n  resetPassword,\n} from \"../../actions/authActions\";\nimport { Form, Container, Button, Col, Modal } from \"react-bootstrap\";\n\nconst UpdatePassword = (props) => {\n  const { auth, authError, errMessage, errKey } = props;\n  const operations = {\n    passwordUpdate: {\n      label: \"Updating your password\",\n      successMessage: \"Your password has been updated successfully\",\n      updateKey: \"updatePassword\",\n    },\n    passwordReset: {\n      label: \"Recovering your password\",\n      successMessage:\n        \"A reset password email has been sent successfully, you can check your mailbox to set a new password\",\n      updateKey: \"resetPassword\",\n    },\n  };\n\n  const [newPassword, setNewPassword] = React.useState(\"\");\n  const [passwordRepeat, setPasswordRepeat] = React.useState(\"\");\n  const [confirmModalShow, setConfirmModalShow] = React.useState(false);\n  const [updateSuccessModalShow, setUpdateSuccessModalShow] = React.useState(\n    false\n  );\n  const [resetSuccessModalShow, setResetSuccessModalShow] = React.useState(\n    false\n  );\n  const [doesPasswordMatch, setDoesPasswordMatch] = React.useState(true);\n  const [doesPasswordValid, setDoesPasswordValid] = React.useState(true);\n\n  const checkPassword = () => {\n    if (newPassword === passwordRepeat && newPassword.length > 5) {\n      setDoesPasswordMatch(true);\n      setDoesPasswordValid(true);\n      return true;\n    } else {\n      if (newPassword !== passwordRepeat) {\n        setDoesPasswordMatch(false);\n      }\n      if (newPassword.length < 6) {\n        setDoesPasswordValid(false);\n      }\n    }\n    return false;\n  };\n\n  const updatePassword = (password) => {\n    const data = {\n      currentEmail: auth.email,\n      currentPassword: password,\n      newPassword,\n      userId: auth.uid,\n      key: \"updatePassword\",\n    };\n    props.updatePasswordAndEmail(data);\n  };\n\n  const ConfirmModal = (props) => {\n    const [currentPassword, setCurrentPassword] = React.useState(\"\");\n    return (\n      <Modal\n        {...props}\n        size=\"md\"\n        aria-labelledby=\"contained-modal-title-vcenter updatePassword\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter updatePassword\">\n            Updating your password\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <h6>Enter your current password to confirm</h6>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Password\"\n            onInput={(e) => {\n              setCurrentPassword(e.target.value);\n            }}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"danger\" onClick={props.onHide}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              props.onHide();\n              updatePassword(currentPassword);\n              setUpdateSuccessModalShow(true);\n            }}\n          >\n            Update Password\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  };\n\n  const SuccessModal = (props) => {\n    return (\n      <Modal\n        {...props}\n        size=\"md\"\n        aria-labelledby={`contained-modal-title-vcenter ${props.operation.label}`}\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title\n            id={`contained-modal-title-vcenter ${props.operation.label}`}\n          >\n            {props.operation.label}\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          {authError && errKey === props.operation.updateKey ? (\n            <div className=\"errMsgContainer\">\n              <b>{authError}</b>\n              <div className=\"errMsg\">{errMessage}</div>\n            </div>\n          ) : (\n            <p>{props.operation.successMessage}</p>\n          )}\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"success\" onClick={props.onHide}>\n            Done\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  };\n\n  return (\n    <div className=\"updatePassword\">\n      <h4 className=\"editingTitle\">Change Password</h4>\n      <Form>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"email\">\n            <Form.Label>New Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Password\"\n              onInput={(e) => {\n                setNewPassword(e.target.value);\n              }}\n            />\n          </Form.Group>\n          <Form.Group as={Col} controlId=\"email\">\n            <Form.Label>Confirm New Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Re-type password\"\n              onInput={(e) => {\n                setPasswordRepeat(e.target.value);\n                setDoesPasswordMatch(true);\n                setDoesPasswordValid(true);\n              }}\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          {!doesPasswordMatch && (\n            <div className=\"passwordMatch\">Your passwords must match</div>\n          )}\n        </Form.Row>\n        <Form.Row>\n          {!doesPasswordValid && (\n            <div className=\"passwordValid\">\n              Your password must be at least 6 characters\n            </div>\n          )}\n        </Form.Row>\n        <Container>\n          {/* Show error message when fails to sign up */}\n          {authError && errKey === \"updatePassword\" && (\n            <div className=\"errMsgContainer\">\n              <b>{authError}</b>\n              <div className=\"errMsg\">{errMessage}</div>\n            </div>\n          )}\n        </Container>\n      </Form>\n      <div className=\"resetPassword\">\n        <p>\n          Forgot your password?{\" \"}\n          <b\n            onClick={() => {\n              props.resetPassword(auth.email);\n              if (errKey !== \"updatePassword\") {\n                setResetSuccessModalShow(true);\n              }\n            }}\n          >\n            Click here\n          </b>{\" \"}\n          to send you a reset password email\n        </p>\n      </div>\n\n      <Button\n        variant=\"primary\"\n        onClick={() => {\n          if (checkPassword()) {\n            setConfirmModalShow(true);\n          }\n        }}\n      >\n        Update Password\n      </Button>\n\n      <ConfirmModal\n        show={confirmModalShow}\n        onHide={() => setConfirmModalShow(false)}\n      />\n\n      <SuccessModal\n        show={updateSuccessModalShow}\n        onHide={() => setUpdateSuccessModalShow(false)}\n        operation={operations.passwordUpdate}\n      />\n\n      <SuccessModal\n        show={resetSuccessModalShow}\n        onHide={() => setResetSuccessModalShow(false)}\n        operation={operations.passwordReset}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    authError: state.auth.authError,\n    errMessage: state.auth.errMessage,\n    errKey: state.auth.errKey,\n    auth: state.firebase.auth,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updatePasswordAndEmail: (data) => dispatch(updatePasswordAndEmail(data)),\n    resetPassword: (email) => dispatch(resetPassword(email)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdatePassword);\n"]},"metadata":{},"sourceType":"module"}