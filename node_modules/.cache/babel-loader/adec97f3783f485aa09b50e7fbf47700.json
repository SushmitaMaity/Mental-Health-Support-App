{"ast":null,"code":"import { LOGIN_ERROR, LOGIN_SUCCESS, SIGN_OUT_SUCCESS, SIGN_UP_SUCCESS, SIGN_UP_ERROR, FACEBOOK_AUTH_SUCCESS, FACEBOOK_AUTH_ERROR, GOOGLE_AUTH_SUCCESS, GOOGLE_AUTH_ERROR, UPDATE_SUCCESS, UPDATE_ERROR, PROFILE_AUTH_DELETE_SUCCESS, PROFILE_AUTH_DELETE_ERROR, PROFILE_DATA_DELETE_SUCCESS, PROFILE_DATA_DELETE_ERROR, UPDATE_EMAIL_SUCCESS, UPDATE_EMAIL_ERROR, UPDATE_PASSWORD_SUCCESS, UPDATE_PASSWORD_ERROR, SEND_RESET_PASSWORD_EMAIL_SUCCESS, SEND_RESET_PASSWORD_EMAIL_ERROR, PHOTO_UPLOAD_SUCCESS, PHOTO_UPLOAD_ERROR, DELETE_STORAGE_SUCCESS, DELETE_STORAGE_ERROR, ADD_NEWSLETTER_SUCCESS, ADD_NEWSLETTER_ERROR } from \"./actionTypes\";\n\nconst addToFirebaseDB = (firestore, data) => {\n  const db = firestore.collection(\"profiles\").doc(data.userId);\n  db.get().then(doc => {\n    if (!doc.exists) {\n      return db.set({ ...data\n      });\n    }\n  });\n};\n\nexport const signIn = credentials => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    firebase.auth().signInWithEmailAndPassword(credentials.email, credentials.password).then(() => {\n      dispatch({\n        type: LOGIN_SUCCESS\n      });\n    }).catch(err => {\n      dispatch({\n        type: LOGIN_ERROR,\n        err\n      });\n    });\n  };\n};\nexport const signOut = () => {\n  return (dispatch, getState, {\n    getFirebase\n  }) => {\n    const firebase = getFirebase();\n    firebase.auth().signOut().then(() => {\n      dispatch({\n        type: SIGN_OUT_SUCCESS\n      });\n    });\n  };\n};\nexport const signUp = newProfile => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirestore();\n    firebase.auth().createUserWithEmailAndPassword(newProfile.email, newProfile.password).then(resp => {\n      const data = {\n        userId: resp.user.uid,\n        firstName: newProfile.firstName,\n        lastName: newProfile.lastName,\n        fullName: newProfile.fullName,\n        imageURL: newProfile.imageURL,\n        email: newProfile.email,\n        provider: resp.user.providerData[0].providerId,\n        userType: \"SUBSCRIBER\"\n      };\n      return addToFirebaseDB(firestore, data);\n    }).then(() => {\n      dispatch({\n        type: SIGN_UP_SUCCESS\n      });\n    }).catch(err => {\n      dispatch({\n        type: SIGN_UP_ERROR,\n        err\n      });\n    });\n  };\n};\nexport const facebookAuth = () => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirestore();\n    const facebookAuthProvider = new firebase.auth.FacebookAuthProvider();\n    firebase.auth().signInWithPopup(facebookAuthProvider).then(resp => {\n      const data = {\n        userId: resp.user.uid,\n        firstName: null,\n        lastName: null,\n        fullName: resp.user.displayName,\n        imageURL: resp.user.photoURL + \"?type=large\",\n        email: resp.user.email,\n        provider: resp.user.providerData[0].providerId,\n        userType: \"SUBSCRIBER\"\n      };\n      return addToFirebaseDB(firestore, data);\n    }).then(() => {\n      dispatch({\n        type: FACEBOOK_AUTH_SUCCESS\n      });\n    }).catch(err => {\n      dispatch({\n        type: FACEBOOK_AUTH_ERROR,\n        err\n      });\n    });\n  };\n};\nexport const googleAuth = () => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const firestore = getFirestore();\n    const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\n    firebase.auth().signInWithPopup(googleAuthProvider).then(resp => {\n      const data = {\n        userId: resp.user.uid,\n        firstName: null,\n        lastName: null,\n        fullName: resp.user.displayName,\n        imageURL: resp.user.photoURL + \"?type=large\",\n        email: resp.user.email,\n        provider: resp.user.providerData[0].providerId,\n        userType: \"SUBSCRIBER\"\n      };\n      return addToFirebaseDB(firestore, data);\n    }).then(() => {\n      dispatch({\n        type: GOOGLE_AUTH_SUCCESS\n      });\n    }).catch(err => {\n      dispatch({\n        type: GOOGLE_AUTH_ERROR,\n        err\n      });\n    });\n  };\n};\nexport const updateProfile = profileInfo => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    firestore.collection(\"profiles\").doc(profileInfo.userId).update(profileInfo).then(() => {\n      dispatch({\n        type: UPDATE_SUCCESS\n      });\n    }).catch(err => {\n      dispatch({\n        type: UPDATE_ERROR,\n        err\n      });\n    });\n  };\n};\nexport const deleteProfileAuth = () => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    const user = firebase.auth().currentUser;\n    user.delete().then(() => {\n      dispatch({\n        type: PROFILE_AUTH_DELETE_SUCCESS\n      });\n    }).catch(err => {\n      dispatch({\n        type: PROFILE_AUTH_DELETE_ERROR,\n        err\n      });\n    });\n  };\n};\nexport const deleteProfileData = userId => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    firestore.collection(\"profiles\").doc(userId).delete().then(() => {\n      dispatch({\n        type: PROFILE_DATA_DELETE_SUCCESS\n      });\n    }).catch(err => {\n      dispatch({\n        type: PROFILE_DATA_DELETE_ERROR,\n        err\n      });\n    });\n  };\n};\nexport const updatePasswordAndEmail = data => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const firebase = getFirebase();\n    firebase.auth().signInWithEmailAndPassword(data.currentEmail, data.currentPassword).then(function (userCredential) {\n      const user = userCredential.user;\n\n      if (data.key === \"updateEmail\") {\n        user.updateEmail(data.newEmail).then(function () {\n          firestore.collection(\"profiles\").doc(data.userId).update({\n            email: data.newEmail\n          });\n        }).then(() => {\n          dispatch({\n            type: UPDATE_EMAIL_SUCCESS\n          });\n        }).catch(err => {\n          dispatch({\n            type: UPDATE_EMAIL_ERROR,\n            err\n          });\n        });\n      } else {\n        user.updatePassword(data.newPassword).then(() => {\n          dispatch({\n            type: UPDATE_PASSWORD_SUCCESS\n          });\n        }).catch(err => {\n          dispatch({\n            type: UPDATE_PASSWORD_ERROR,\n            err\n          });\n        });\n      }\n    });\n  };\n};\nexport const resetPassword = email => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firebase = getFirebase();\n    firebase.auth().sendPasswordResetEmail(email).then(() => {\n      dispatch({\n        type: SEND_RESET_PASSWORD_EMAIL_SUCCESS\n      });\n    }).catch(err => {\n      dispatch({\n        type: SEND_RESET_PASSWORD_EMAIL_ERROR,\n        err\n      });\n    });\n  };\n};\nexport const updateProfilePhoto = (image, userId) => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const storage = getFirebase().storage().ref();\n    const metadata = {\n      contentType: \"image/jpeg\"\n    };\n    storage.child(`users/${userId}/images/profilephoto`).put(image, metadata).then(uploadTaskResposive => uploadTaskResposive.ref.getDownloadURL().then(uploadedPhotoURL => firestore.collection(\"profiles\").doc(userId).update({\n      imageURL: uploadedPhotoURL\n    }))).then(() => {\n      dispatch({\n        type: PHOTO_UPLOAD_SUCCESS\n      });\n    }).catch(err => {\n      dispatch({\n        type: PHOTO_UPLOAD_ERROR,\n        err\n      });\n    });\n  };\n};\nexport const deleteProfilePhotoOnStorage = userId => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const storageRef = getFirebase().storage().ref();\n    storageRef.child(`users/${userId}/images/profilephoto`).delete().then(() => {\n      dispatch({\n        type: DELETE_STORAGE_SUCCESS\n      });\n    }).catch(err => {\n      dispatch({\n        type: DELETE_STORAGE_ERROR,\n        err\n      });\n    });\n  };\n};\nexport const addNewsletter = email => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    firestore.collection(\"newsLetterSubscribers\").doc(email).set({\n      email\n    }).then(() => {\n      dispatch({\n        type: ADD_NEWSLETTER_SUCCESS\n      });\n    }).catch(err => {\n      dispatch({\n        type: ADD_NEWSLETTER_ERROR,\n        err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/sushmitamaity/Calmify/Mental-Health-Support-App/src/actions/authActions.jsx"],"names":["LOGIN_ERROR","LOGIN_SUCCESS","SIGN_OUT_SUCCESS","SIGN_UP_SUCCESS","SIGN_UP_ERROR","FACEBOOK_AUTH_SUCCESS","FACEBOOK_AUTH_ERROR","GOOGLE_AUTH_SUCCESS","GOOGLE_AUTH_ERROR","UPDATE_SUCCESS","UPDATE_ERROR","PROFILE_AUTH_DELETE_SUCCESS","PROFILE_AUTH_DELETE_ERROR","PROFILE_DATA_DELETE_SUCCESS","PROFILE_DATA_DELETE_ERROR","UPDATE_EMAIL_SUCCESS","UPDATE_EMAIL_ERROR","UPDATE_PASSWORD_SUCCESS","UPDATE_PASSWORD_ERROR","SEND_RESET_PASSWORD_EMAIL_SUCCESS","SEND_RESET_PASSWORD_EMAIL_ERROR","PHOTO_UPLOAD_SUCCESS","PHOTO_UPLOAD_ERROR","DELETE_STORAGE_SUCCESS","DELETE_STORAGE_ERROR","ADD_NEWSLETTER_SUCCESS","ADD_NEWSLETTER_ERROR","addToFirebaseDB","firestore","data","db","collection","doc","userId","get","then","exists","set","signIn","credentials","dispatch","getState","getFirebase","firebase","auth","signInWithEmailAndPassword","email","password","type","catch","err","signOut","signUp","newProfile","getFirestore","createUserWithEmailAndPassword","resp","user","uid","firstName","lastName","fullName","imageURL","provider","providerData","providerId","userType","facebookAuth","facebookAuthProvider","FacebookAuthProvider","signInWithPopup","displayName","photoURL","googleAuth","googleAuthProvider","GoogleAuthProvider","updateProfile","profileInfo","update","deleteProfileAuth","currentUser","delete","deleteProfileData","updatePasswordAndEmail","currentEmail","currentPassword","userCredential","key","updateEmail","newEmail","updatePassword","newPassword","resetPassword","sendPasswordResetEmail","updateProfilePhoto","image","storage","ref","metadata","contentType","child","put","uploadTaskResposive","getDownloadURL","uploadedPhotoURL","deleteProfilePhotoOnStorage","storageRef","addNewsletter"],"mappings":"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","sourcesContent":["import {\n  LOGIN_ERROR,\n  LOGIN_SUCCESS,\n  SIGN_OUT_SUCCESS,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_ERROR,\n  FACEBOOK_AUTH_SUCCESS,\n  FACEBOOK_AUTH_ERROR,\n  GOOGLE_AUTH_SUCCESS,\n  GOOGLE_AUTH_ERROR,\n  UPDATE_SUCCESS,\n  UPDATE_ERROR,\n  PROFILE_AUTH_DELETE_SUCCESS,\n  PROFILE_AUTH_DELETE_ERROR,\n  PROFILE_DATA_DELETE_SUCCESS,\n  PROFILE_DATA_DELETE_ERROR,\n  UPDATE_EMAIL_SUCCESS,\n  UPDATE_EMAIL_ERROR,\n  UPDATE_PASSWORD_SUCCESS,\n  UPDATE_PASSWORD_ERROR,\n  SEND_RESET_PASSWORD_EMAIL_SUCCESS,\n  SEND_RESET_PASSWORD_EMAIL_ERROR,\n  PHOTO_UPLOAD_SUCCESS,\n  PHOTO_UPLOAD_ERROR,\n  DELETE_STORAGE_SUCCESS,\n  DELETE_STORAGE_ERROR,\n  ADD_NEWSLETTER_SUCCESS,\n  ADD_NEWSLETTER_ERROR,\n} from \"./actionTypes\";\n\nconst addToFirebaseDB = (firestore, data) => {\n  const db = firestore.collection(\"profiles\").doc(data.userId);\n  db.get().then((doc) => {\n    if (!doc.exists) {\n      return db.set({ ...data });\n    }\n  });\n};\n\nexport const signIn = (credentials) => {\n  return (dispatch, getState, { getFirebase }) => {\n    const firebase = getFirebase();\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(credentials.email, credentials.password)\n      .then(() => {\n        dispatch({ type: LOGIN_SUCCESS });\n      })\n      .catch((err) => {\n        dispatch({ type: LOGIN_ERROR, err });\n      });\n  };\n};\n\nexport const signOut = () => {\n  return (dispatch, getState, { getFirebase }) => {\n    const firebase = getFirebase();\n    firebase\n      .auth()\n      .signOut()\n      .then(() => {\n        dispatch({ type: SIGN_OUT_SUCCESS });\n      });\n  };\n};\n\nexport const signUp = (newProfile) => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase();\n    const firestore = getFirestore();\n    firebase\n      .auth()\n      .createUserWithEmailAndPassword(newProfile.email, newProfile.password)\n      .then((resp) => {\n        const data = {\n          userId: resp.user.uid,\n          firstName: newProfile.firstName,\n          lastName: newProfile.lastName,\n          fullName: newProfile.fullName,\n          imageURL: newProfile.imageURL,\n          email: newProfile.email,\n          provider: resp.user.providerData[0].providerId,\n          userType: \"SUBSCRIBER\",\n        };\n        return addToFirebaseDB(firestore, data);\n      })\n      .then(() => {\n        dispatch({ type: SIGN_UP_SUCCESS });\n      })\n      .catch((err) => {\n        dispatch({ type: SIGN_UP_ERROR, err });\n      });\n  };\n};\n\nexport const facebookAuth = () => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase();\n    const firestore = getFirestore();\n    const facebookAuthProvider = new firebase.auth.FacebookAuthProvider();\n    firebase\n      .auth()\n      .signInWithPopup(facebookAuthProvider)\n      .then((resp) => {\n        const data = {\n          userId: resp.user.uid,\n          firstName: null,\n          lastName: null,\n          fullName: resp.user.displayName,\n          imageURL: resp.user.photoURL + \"?type=large\",\n          email: resp.user.email,\n          provider: resp.user.providerData[0].providerId,\n          userType: \"SUBSCRIBER\",\n        };\n        return addToFirebaseDB(firestore, data);\n      })\n      .then(() => {\n        dispatch({ type: FACEBOOK_AUTH_SUCCESS });\n      })\n      .catch((err) => {\n        dispatch({ type: FACEBOOK_AUTH_ERROR, err });\n      });\n  };\n};\n\nexport const googleAuth = () => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase();\n    const firestore = getFirestore();\n    const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\n    firebase\n      .auth()\n      .signInWithPopup(googleAuthProvider)\n      .then((resp) => {\n        const data = {\n          userId: resp.user.uid,\n          firstName: null,\n          lastName: null,\n          fullName: resp.user.displayName,\n          imageURL: resp.user.photoURL + \"?type=large\",\n          email: resp.user.email,\n          provider: resp.user.providerData[0].providerId,\n          userType: \"SUBSCRIBER\",\n        };\n        return addToFirebaseDB(firestore, data);\n      })\n      .then(() => {\n        dispatch({ type: GOOGLE_AUTH_SUCCESS });\n      })\n      .catch((err) => {\n        dispatch({ type: GOOGLE_AUTH_ERROR, err });\n      });\n  };\n};\n\nexport const updateProfile = (profileInfo) => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firestore = getFirestore();\n    firestore\n      .collection(\"profiles\")\n      .doc(profileInfo.userId)\n      .update(profileInfo)\n      .then(() => {\n        dispatch({ type: UPDATE_SUCCESS });\n      })\n      .catch((err) => {\n        dispatch({ type: UPDATE_ERROR, err });\n      });\n  };\n};\n\nexport const deleteProfileAuth = () => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase();\n    const user = firebase.auth().currentUser;\n    user\n      .delete()\n      .then(() => {\n        dispatch({ type: PROFILE_AUTH_DELETE_SUCCESS });\n      })\n      .catch((err) => {\n        dispatch({ type: PROFILE_AUTH_DELETE_ERROR, err });\n      });\n  };\n};\n\nexport const deleteProfileData = (userId) => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firestore = getFirestore();\n    firestore\n      .collection(\"profiles\")\n      .doc(userId)\n      .delete()\n      .then(() => {\n        dispatch({ type: PROFILE_DATA_DELETE_SUCCESS });\n      })\n      .catch((err) => {\n        dispatch({ type: PROFILE_DATA_DELETE_ERROR, err });\n      });\n  };\n};\n\nexport const updatePasswordAndEmail = (data) => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firestore = getFirestore();\n    const firebase = getFirebase();\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(data.currentEmail, data.currentPassword)\n      .then(function (userCredential) {\n        const user = userCredential.user;\n        if (data.key === \"updateEmail\") {\n          user\n            .updateEmail(data.newEmail)\n            .then(function () {\n              firestore\n                .collection(\"profiles\")\n                .doc(data.userId)\n                .update({ email: data.newEmail });\n            })\n            .then(() => {\n              dispatch({ type: UPDATE_EMAIL_SUCCESS });\n            })\n            .catch((err) => {\n              dispatch({ type: UPDATE_EMAIL_ERROR, err });\n            });\n        } else {\n          user\n            .updatePassword(data.newPassword)\n            .then(() => {\n              dispatch({ type: UPDATE_PASSWORD_SUCCESS });\n            })\n            .catch((err) => {\n              dispatch({ type: UPDATE_PASSWORD_ERROR, err });\n            });\n        }\n      });\n  };\n};\n\nexport const resetPassword = (email) => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase();\n    firebase\n      .auth()\n      .sendPasswordResetEmail(email)\n      .then(() => {\n        dispatch({ type: SEND_RESET_PASSWORD_EMAIL_SUCCESS });\n      })\n      .catch((err) => {\n        dispatch({ type: SEND_RESET_PASSWORD_EMAIL_ERROR, err });\n      });\n  };\n};\n\nexport const updateProfilePhoto = (image, userId) => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firestore = getFirestore();\n    const storage = getFirebase().storage().ref();\n    const metadata = {\n      contentType: \"image/jpeg\",\n    };\n    storage\n      .child(`users/${userId}/images/profilephoto`)\n      .put(image, metadata)\n      .then((uploadTaskResposive) =>\n        uploadTaskResposive.ref\n          .getDownloadURL()\n          .then((uploadedPhotoURL) =>\n            firestore\n              .collection(\"profiles\")\n              .doc(userId)\n              .update({ imageURL: uploadedPhotoURL })\n          )\n      )\n      .then(() => {\n        dispatch({ type: PHOTO_UPLOAD_SUCCESS });\n      })\n      .catch((err) => {\n        dispatch({ type: PHOTO_UPLOAD_ERROR, err });\n      });\n  };\n};\n\nexport const deleteProfilePhotoOnStorage = (userId) => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const storageRef = getFirebase().storage().ref();\n    storageRef\n      .child(`users/${userId}/images/profilephoto`)\n      .delete()\n      .then(() => {\n        dispatch({ type: DELETE_STORAGE_SUCCESS });\n      })\n      .catch((err) => {\n        dispatch({ type: DELETE_STORAGE_ERROR, err });\n      });\n  };\n};\n\nexport const addNewsletter = (email) => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firestore = getFirestore();\n    firestore\n      .collection(\"newsLetterSubscribers\")\n      .doc(email)\n      .set({ email })\n      .then(() => {\n        dispatch({ type: ADD_NEWSLETTER_SUCCESS });\n      })\n      .catch((err) => {\n        dispatch({ type: ADD_NEWSLETTER_ERROR, err });\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}