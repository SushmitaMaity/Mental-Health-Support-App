{"ast":null,"code":"import { ADD_BLOG_SUCCESS, ADD_BLOG_ERROR, ADD_COMMENT_SUCCESS, ADD_COMMENT_ERROR, DELETE_COMMENT_SUCCESS, DELETE_COMMENT_ERROR, BLOG_APPROVAL_SUCCESS, BLOG_APPROVAL_ERROR, DELETE_BLOG_FROM_STORAGE_SUCCESS, DELETE_BLOG_FROM_STORAGE_ERROR, DELETE_BLOG_FROM_DB_SUCCESS, DELETE_BLOG_FROM_DB_ERROR } from \"./actionTypes\";\nexport const addBlog = (blogHeaderImage, data) => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const storage = getFirebase().storage().ref();\n    const metadata = {\n      contentType: \"image/jpeg\"\n    };\n    storage.child(`users/${data.userId}/images/blogs/${data.blogId}/blogHeaderImage`).put(blogHeaderImage, metadata).then(uploadTaskResposive => uploadTaskResposive.ref.getDownloadURL().then(uploadedPhotoURL => firestore.collection(\"blogs\").doc(data.blogId).set({\n      imageURL: uploadedPhotoURL,\n      ...data\n    }))).then(() => {\n      dispatch({\n        type: ADD_BLOG_SUCCESS\n      });\n    }).catch(err => {\n      dispatch({\n        type: ADD_BLOG_ERROR,\n        err\n      });\n    });\n  };\n};\nexport const addComment = (blogId, commentData) => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    firestore.collection(\"blogs\").doc(blogId).update({\n      comments: firestore.FieldValue.arrayUnion({ ...commentData\n      })\n    }).then(() => {\n      dispatch({\n        type: ADD_COMMENT_SUCCESS\n      });\n    }).catch(err => {\n      dispatch({\n        type: ADD_COMMENT_ERROR,\n        err\n      });\n    });\n  };\n};\nexport const deleteComment = (blogId, comment) => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    firestore.collection(\"blogs\").doc(blogId).update({\n      comments: firestore.FieldValue.arrayRemove(comment)\n    }).then(() => {\n      dispatch({\n        type: DELETE_COMMENT_SUCCESS\n      });\n    }).catch(err => {\n      dispatch({\n        type: DELETE_COMMENT_ERROR,\n        err\n      });\n    });\n  };\n};\nexport const approveBlog = blogData => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    firestore.collection(\"blogs\").doc(blogData.blogId).update({\n      isApproved: blogData.isApproved\n    }).then(() => {\n      dispatch({\n        type: BLOG_APPROVAL_SUCCESS\n      });\n    }).catch(err => {\n      dispatch({\n        type: BLOG_APPROVAL_ERROR,\n        err\n      });\n    });\n  };\n};\nexport const deleteBlogFromStorage = blogData => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const storageRef = getFirebase().storage().ref();\n    storageRef.child(`users/${blogData.userId}/images/blogs/${blogData.blogId}/blogHeaderImage`).delete().then(() => {\n      dispatch({\n        type: DELETE_BLOG_FROM_STORAGE_SUCCESS\n      });\n    }).catch(err => {\n      dispatch({\n        type: DELETE_BLOG_FROM_STORAGE_ERROR,\n        err\n      });\n    });\n  };\n};\nexport const deleteBlogFromDB = blogId => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    firestore.collection(\"blogs\").doc(blogId).delete().then(() => {\n      dispatch({\n        type: DELETE_BLOG_FROM_DB_SUCCESS\n      });\n    }).catch(err => {\n      dispatch({\n        type: DELETE_BLOG_FROM_DB_ERROR,\n        err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/sushmitamaity/Mental-Health-Support/src/actions/blogActions.jsx"],"names":["ADD_BLOG_SUCCESS","ADD_BLOG_ERROR","ADD_COMMENT_SUCCESS","ADD_COMMENT_ERROR","DELETE_COMMENT_SUCCESS","DELETE_COMMENT_ERROR","BLOG_APPROVAL_SUCCESS","BLOG_APPROVAL_ERROR","DELETE_BLOG_FROM_STORAGE_SUCCESS","DELETE_BLOG_FROM_STORAGE_ERROR","DELETE_BLOG_FROM_DB_SUCCESS","DELETE_BLOG_FROM_DB_ERROR","addBlog","blogHeaderImage","data","dispatch","getState","getFirebase","getFirestore","firestore","storage","ref","metadata","contentType","child","userId","blogId","put","then","uploadTaskResposive","getDownloadURL","uploadedPhotoURL","collection","doc","set","imageURL","type","catch","err","addComment","commentData","update","comments","FieldValue","arrayUnion","deleteComment","comment","arrayRemove","approveBlog","blogData","isApproved","deleteBlogFromStorage","storageRef","delete","deleteBlogFromDB"],"mappings":"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","sourcesContent":["import {\n  ADD_BLOG_SUCCESS,\n  ADD_BLOG_ERROR,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_ERROR,\n  DELETE_COMMENT_SUCCESS,\n  DELETE_COMMENT_ERROR,\n  BLOG_APPROVAL_SUCCESS,\n  BLOG_APPROVAL_ERROR,\n  DELETE_BLOG_FROM_STORAGE_SUCCESS,\n  DELETE_BLOG_FROM_STORAGE_ERROR,\n  DELETE_BLOG_FROM_DB_SUCCESS,\n  DELETE_BLOG_FROM_DB_ERROR,\n} from \"./actionTypes\";\n\nexport const addBlog = (blogHeaderImage, data) => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firestore = getFirestore();\n    const storage = getFirebase().storage().ref();\n    const metadata = {\n      contentType: \"image/jpeg\",\n    };\n    storage\n      .child(`users/${data.userId}/images/blogs/${data.blogId}/blogHeaderImage`)\n      .put(blogHeaderImage, metadata)\n      .then((uploadTaskResposive) =>\n        uploadTaskResposive.ref.getDownloadURL().then((uploadedPhotoURL) =>\n          firestore\n            .collection(\"blogs\")\n            .doc(data.blogId)\n            .set({ imageURL: uploadedPhotoURL, ...data })\n        )\n      )\n      .then(() => {\n        dispatch({ type: ADD_BLOG_SUCCESS });\n      })\n      .catch((err) => {\n        dispatch({ type: ADD_BLOG_ERROR, err });\n      });\n  };\n};\n\nexport const addComment = (blogId, commentData) => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firestore = getFirestore();\n    firestore\n      .collection(\"blogs\")\n      .doc(blogId)\n      .update({ comments: firestore.FieldValue.arrayUnion({ ...commentData }) })\n      .then(() => {\n        dispatch({ type: ADD_COMMENT_SUCCESS });\n      })\n      .catch((err) => {\n        dispatch({ type: ADD_COMMENT_ERROR, err });\n      });\n  };\n};\n\nexport const deleteComment = (blogId, comment) => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firestore = getFirestore();\n    firestore\n      .collection(\"blogs\")\n      .doc(blogId)\n      .update({ comments: firestore.FieldValue.arrayRemove(comment) })\n      .then(() => {\n        dispatch({ type: DELETE_COMMENT_SUCCESS });\n      })\n      .catch((err) => {\n        dispatch({ type: DELETE_COMMENT_ERROR, err });\n      });\n  };\n};\n\nexport const approveBlog = (blogData) => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firestore = getFirestore();\n    firestore\n      .collection(\"blogs\")\n      .doc(blogData.blogId)\n      .update({ isApproved: blogData.isApproved })\n      .then(() => {\n        dispatch({ type: BLOG_APPROVAL_SUCCESS });\n      })\n      .catch((err) => {\n        dispatch({ type: BLOG_APPROVAL_ERROR, err });\n      });\n  };\n};\n\nexport const deleteBlogFromStorage = (blogData) => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const storageRef = getFirebase().storage().ref();\n    storageRef\n      .child(\n        `users/${blogData.userId}/images/blogs/${blogData.blogId}/blogHeaderImage`\n      )\n      .delete()\n      .then(() => {\n        dispatch({ type: DELETE_BLOG_FROM_STORAGE_SUCCESS });\n      })\n      .catch((err) => {\n        dispatch({ type: DELETE_BLOG_FROM_STORAGE_ERROR, err });\n      });\n  };\n};\n\nexport const deleteBlogFromDB = (blogId) => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firestore = getFirestore();\n    firestore\n      .collection(\"blogs\")\n      .doc(blogId)\n      .delete()\n      .then(() => {\n        dispatch({ type: DELETE_BLOG_FROM_DB_SUCCESS });\n      })\n      .catch((err) => {\n        dispatch({ type: DELETE_BLOG_FROM_DB_ERROR, err });\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}